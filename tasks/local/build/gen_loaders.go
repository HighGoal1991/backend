// Copyright 2014 The lime Authors.
// Use of this source code is governed by a 2-clause
// BSD-style license that can be found in the LICENSE file.

package main

import (
	"log"
	"os"
	"os/exec"
)

func getPegparser() {
	cmd := exec.Command("go", "get", "github.com/quarnster/parser/pegparser")
	out, err := cmd.CombinedOutput()
	if err != nil {
		log.Println(err)
	}
	if s := string(out); s != "" {
		log.Println(s)
	}
}

func main() {
	getPegparser()
	header := "// This file was generated by tasks/build/gen_loaders.go and shouldn't be manually modified\n"

	loaders := [][]string{
		{
			"./backend/loaders/json/json.peg",
			"./backend/loaders/json",
			"json_generated",
			"JsonFile,Values,Value,Null,Dictionary,Array,KeyValuePairs,KeyValuePair,QuotedText,Text,Integer,Float,Boolean,Spacing,Comment",
			"testdata/Default (OSX).sublime-keymap",
		},
		{
			"./backend/loaders/plist/plist.peg",
			"./backend/loaders/plist",
			"plist_generated",
			"Spacing,KeyValuePair,KeyTag,StringTag,Value,Values,PlistFile,Plist",
			"testdata/C.plist",
		},
	}

	for _, loader := range loaders {
		log.Println("Generating from " + loader[0])
		cmd := exec.Command(
			os.ExpandEnv("$GOPATH/bin/pegparser"),
			"-peg="+loader[0],
			"-outpath="+loader[1],
			"-outfile="+loader[2],
			"-ignore="+loader[3],
			"-testfile="+loader[4],
			"-header="+header,
			"-notest",
		)
		if err := cmd.Run(); err != nil {
			log.Println(err.Error())
		}
	}

	log.Println("Running ./tasks/build/fix.go")
	cmd := exec.Command(
		"go",
		"run",
		"./tasks/build/fix.go",
	)
	out, _ := cmd.CombinedOutput()
	log.SetFlags(0)
	log.Println(string(out))
}
